# PostgreSQL Exporter - PG17 kompatibel (OHNE pg_stat_bgwriter!)

queries:
  # 1. Basic Health Check
  - name: pg_up
    help: "PostgreSQL is up and accepting connections"
    type: gauge
    query: "SELECT 1 as up"
    metrics:
      - up:
          usage: "GAUGE"
          description: "Database is up"

  # 2. Database Statistics (wichtigste Metriken)
  - name: pg_stat_database
    help: "Database statistics"
    type: gauge
    query: |
      SELECT 
        datname,
        numbackends,
        xact_commit,
        xact_rollback,
        blks_read,
        blks_hit,
        tup_returned,
        tup_fetched,
        tup_inserted,
        tup_updated,
        tup_deleted,
        conflicts,
        temp_files,
        temp_bytes,
        deadlocks
      FROM pg_stat_database
      WHERE datname = current_database()
    metrics:
      - datname:
          usage: "LABEL"
      - numbackends:
          usage: "GAUGE"
          description: "Number of backends currently connected"
      - xact_commit:
          usage: "COUNTER"
      - xact_rollback:
          usage: "COUNTER"
      - blks_read:
          usage: "COUNTER"
      - blks_hit:
          usage: "COUNTER"
      - tup_returned:
          usage: "COUNTER"
      - tup_fetched:
          usage: "COUNTER"
      - tup_inserted:
          usage: "COUNTER"
      - tup_updated:
          usage: "COUNTER"
      - tup_deleted:
          usage: "COUNTER"
      - conflicts:
          usage: "COUNTER"
      - temp_files:
          usage: "COUNTER"
      - temp_bytes:
          usage: "COUNTER"
      - deadlocks:
          usage: "COUNTER"

  # 3. Active Connections
  - name: pg_stat_activity
    help: "Active connections by state"
    type: gauge
    query: |
      SELECT 
        COALESCE(state, 'unknown') as state,
        count(*) as connections
      FROM pg_stat_activity
      WHERE datname = current_database()
      GROUP BY state
    metrics:
      - state:
          usage: "LABEL"
      - connections:
          usage: "GAUGE"

  # 4. Database Size
  - name: pg_database_size
    help: "Database size in bytes"
    type: gauge
    query: |
      SELECT 
        datname,
        pg_database_size(datname) as size_bytes
      FROM pg_database
      WHERE datname = current_database()
    metrics:
      - datname:
          usage: "LABEL"
      - size_bytes:
          usage: "GAUGE"

  # 5. TimescaleDB Hypertables (aggregiert)
  - name: timescaledb_hypertables
    help: "TimescaleDB hypertable statistics"
    type: gauge
    query: |
      SELECT 
        format('%I.%I', schema_name, table_name) as hypertable,
        num_chunks,
        COALESCE((
          SELECT sum(total_bytes)
          FROM hypertable_detailed_size(format('%I.%I', schema_name, table_name)::regclass)
        ), 0) as total_bytes
      FROM timescaledb_information.hypertables
    metrics:
      - hypertable:
          usage: "LABEL"
      - num_chunks:
          usage: "GAUGE"
      - total_bytes:
          usage: "GAUGE"

  # 6. User Tables (OHNE TimescaleDB chunks)
  - name: pg_stat_user_tables_summary
    help: "User table statistics summary (top 20)"
    type: gauge
    query: |
      SELECT 
        schemaname || '.' || relname as table_name,
        n_live_tup,
        n_dead_tup,
        n_tup_ins,
        n_tup_upd,
        n_tup_del,
        seq_scan,
        idx_scan
      FROM pg_stat_user_tables
      WHERE schemaname NOT IN ('_timescaledb_internal', '_timescaledb_catalog', '_timescaledb_config')
        AND relname NOT LIKE '_hyper_%'
      ORDER BY n_live_tup DESC
      LIMIT 20
    metrics:
      - table_name:
          usage: "LABEL"
      - n_live_tup:
          usage: "GAUGE"
      - n_dead_tup:
          usage: "GAUGE"
      - n_tup_ins:
          usage: "COUNTER"
      - n_tup_upd:
          usage: "COUNTER"
      - n_tup_del:
          usage: "COUNTER"
      - seq_scan:
          usage: "COUNTER"
      - idx_scan:
          usage: "COUNTER"

  # 7. Replication Lag (falls Replikation aktiv)
  - name: pg_replication_lag
    help: "Replication lag in seconds"
    type: gauge
    query: |
      SELECT 
        COALESCE(EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp())), 0) as lag_seconds
      WHERE pg_is_in_recovery()
    metrics:
      - lag_seconds:
          usage: "GAUGE"
